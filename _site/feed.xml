<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wstwwk</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 04 Nov 2016 18:23:12 +0800</pubDate>
    <lastBuildDate>Fri, 04 Nov 2016 18:23:12 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Fisher–Yates shuffle 洗牌算法</title>
        <description>
简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。

本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。

&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Riffle_shuffle.jpg/320px-Riffle_shuffle.jpg&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/10/16/shuffle-algorithm/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/16/shuffle-algorithm/</guid>
        
        <category>算法</category>
        
        <category>shuffle</category>
        
        <category>乱序</category>
        
        <category>洗牌</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Git 如何 clone 非 master 分支的代码</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;问题描述&lt;/h2&gt;

我们每次使用命令

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@gitlab.xxx.com:xxxxx.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在&lt;code class=&quot;highlighter-rouge&quot;&gt;daily/1.4.1&lt;/code&gt;分支上，我们希望拿到这个分支上的代码。

</description>
        <pubDate>Thu, 07 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/07/07/git-clone-not-master-branch/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/07/07/git-clone-not-master-branch/</guid>
        
        <category>Git</category>
        
        <category>GitHub</category>
        
        <category>分支</category>
        
        
        <category>GitHub</category>
        
      </item>
    
      <item>
        <title>如何使用 babel</title>
        <description>
&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做准备。本文将介绍如何使用 babel，以及一些相关的配置。

</description>
        <pubDate>Tue, 14 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/06/14/how-to-use-babel/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/14/how-to-use-babel/</guid>
        
        <category>ES2015</category>
        
        <category>ES6</category>
        
        <category>ES5</category>
        
        <category>babel</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>JavaScript 语言精粹笔记3-方法、毒瘤等</title>
        <description>
记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。

</description>
        <pubDate>Fri, 10 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/06/10/JavaScript-good-parts-note3/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/10/JavaScript-good-parts-note3/</guid>
        
        <category>函数</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>JavaScript 语言精粹笔记2-继承、数组、正则表达式</title>
        <description>
记录一下阅读蝴蝶书的笔记，本篇为书中以下章节的笔记：继承、数组和正则表达式。

</description>
        <pubDate>Wed, 08 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/06/08/JavaScript-good-parts-note2/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/08/JavaScript-good-parts-note2/</guid>
        
        <category>继承</category>
        
        <category>对象</category>
        
        <category>原型</category>
        
        <category>Array</category>
        
        <category>正则</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>JavaScript 语言精粹笔记1-语法、对象、函数</title>
        <description>
记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。

</description>
        <pubDate>Tue, 07 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/06/07/JavaScript-good-parts-note1/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/07/JavaScript-good-parts-note1/</guid>
        
        <category>对象</category>
        
        <category>函数</category>
        
        <category>this</category>
        
        <category>闭包</category>
        
        <category>面向对象</category>
        
        <category>作用域</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>浅谈正则表达式中的分组和引用</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

由正则表达式如何匹配相同字符出发，讲讲正则表达式中的选择、分组和引用。

&lt;h2 id=&quot;section&quot;&gt;问题&lt;/h2&gt;

在外刊君读者群中看到有人提出这样的一个需求：

&lt;blockquote&gt;
  把字符串切成连续相同字符的正则怎么写？比如&lt;code class=&quot;highlighter-rouge&quot;&gt;abbcccdddd&lt;/code&gt;切成&lt;code class=&quot;highlighter-rouge&quot;&gt;a,bb,ccc,dddd&lt;/code&gt;
&lt;/blockquote&gt;

之前我对正则表达式也是略有研究，想尝试一下。其实我对正则表达式的学习基本完全来源于犀牛书的第10章，真正看懂这一章，我觉得操作正则表达式应该不在话下。

</description>
        <pubDate>Fri, 06 May 2016 11:40:18 +0800</pubDate>
        <link>http://localhost:4000/2016/05/06/regular-expression-group/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/05/06/regular-expression-group/</guid>
        
        <category>正则</category>
        
        <category>分组</category>
        
        <category>Regular</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>对这个 jekyll 博客主题的改版和重构</title>
        <description>
本文主要说明对这个博客主题的改版和代码重构的过程。这个简洁高雅的博客主题受到了很多朋友的喜欢。在写第一版界面时，我对前端并不是很熟悉，对&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;也不熟悉。现在距离当时也一年了，对自己当时写的代码也不太满意了，同时&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;如今也已经升级了，目前最新版为3.1.2。因此我在临近毕业尚未入职前做一下博客主题的代码重构和改版吧。

主要想做这些事情有：添加归档，添加标签，添加分类页面，主页显示文章摘要，代码去除 jQuery 和 BootStrap，优化移动端显示，将所有变量写入配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;中等。再优化一些细节吧。希望更多人会喜欢。

</description>
        <pubDate>Sat, 12 Mar 2016 11:40:18 +0800</pubDate>
        <link>http://localhost:4000/2016/03/12/jekyll-theme-version-2.0/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/03/12/jekyll-theme-version-2.0/</guid>
        
        <category>jekyll</category>
        
        <category>端口</category>
        
        <category>markdown</category>
        
        <category>Foxit</category>
        
        <category>RubyGems</category>
        
        <category>HTML</category>
        
        <category>CSS</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>前端处理动态 url 和 pushStatus 的使用</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;起因&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;起因&lt;/h2&gt;

起因是这样的，在尝试前后端分离的这条道路上，我自己也在不断摸索，感觉要把大部分的坑都踩踩了。目前我用的技术是：

&lt;ul&gt;
  &lt;li&gt;webpack 自动构建&lt;/li&gt;
  &lt;li&gt;AMD 模块化 js&lt;/li&gt;
  &lt;li&gt;Sass 预处理 CSS&lt;/li&gt;
  &lt;li&gt;使用前端模板引擎 handlebars 解决动态操作将 html 拼接在 js 中的问题&lt;/li&gt;
&lt;/ul&gt;

但最近写了一个项目类似知乎这样的多页网站。前端 url 的处理让我觉得不够优雅。我使用的是 hash 的方式处理动态 url 的，为此我专门在知乎上提了一个问题：&lt;a href=&quot;https://www.zhihu.com/question/38802932&quot;&gt;前端如何处理动态url？&lt;/a&gt;

</description>
        <pubDate>Fri, 01 Jan 2016 07:06:05 +0800</pubDate>
        <link>http://localhost:4000/2016/01/01/History-API/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/01/History-API/</guid>
        
        <category>JavaScript</category>
        
        <category>Ajax</category>
        
        <category>URL</category>
        
        <category>HistoryApi</category>
        
        <category>pushState</category>
        
        <category>pjax</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>在低版本 IE 中点击空 block 元素的问题</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;问题描述&lt;/h2&gt;

当我们点击一个空的、没有任何内容的 div 或者其他块级元素时。在 IE11 以下，是没有反应的。

</description>
        <pubDate>Fri, 24 Jul 2015 08:06:05 +0800</pubDate>
        <link>http://localhost:4000/2015/07/24/low-IE-click-empty-block-bug/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/07/24/low-IE-click-empty-block-bug/</guid>
        
        <category>IE</category>
        
        <category>CSS</category>
        
        <category>兼容性</category>
        
        <category>HTML</category>
        
        
        <category>CSS</category>
        
      </item>
    
  </channel>
</rss>
